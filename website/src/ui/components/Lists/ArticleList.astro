---
import { getListArticles } from "@/ui/queries";

import { urlForImage } from "@/scripts/urlForImage";
import { CategoryLabel } from "@/ui/components";

import type { ArticleListProps } from "./types";

interface Props extends ArticleListProps {}

const {
  limit = 3,
  compact = false,
  theme = "light",
  featured = false,
  articles = null,
  itemsPerRow = 3,
  category = null,
  minCount = 3,
  excludeSlug = null,
  title = null,
} = Astro.props;

const posts = articles
  ? articles
  : await getListArticles({ limit, featured, category, excludeSlug });

console.log(category);

const fillCount = minCount - posts.length;
---

<div class:list={["wrapper", compact && "compact", `rowCount--${itemsPerRow}`]}>
  {title && <h3>{title}</h3>}

  <ul>
    {
      posts.map(({ title, slug, excerpt, mainImage, category }) => (
        <li
          class="item"
          itemprop="mainEntity"
          itemscope
          itemtype="https://schema.org/Article"
        >
          <a href={`/${category.slug.current}/${slug.current}`}>
            <img
              class="image"
              src={urlForImage(mainImage).height(237).width(379).url()}
              alt={mainImage.alt}
            />

            <div class="content-wrapper">
              <div class="category">
                <CategoryLabel name={category.title} />
              </div>

              <h2 class:list={["title", theme]} itemprop="headline">
                {title}
              </h2>

              <p class:list={["excerpt", theme]} itemprop="description">
                {excerpt}
              </p>
            </div>
          </a>
        </li>
      ))
    }

    {
      fillCount > 0 &&
        [...Array(fillCount)].map((_) => (
          <li class="empty-item">
            <div class="empty-item__image">
              <span />
            </div>
            <div class="empty-item__title">
              <span />
              <span />
            </div>

            <div class="empty-item__excerpt">
              <span />
              <span />
            </div>
          </li>
        ))
    }
  </ul>
</div>

<style lang="scss">
  .wrapper {
    max-width: var(--widthMainContainer);
    width: 100%;
    margin: 2rem auto;

    &.rowCount--2 ul {
      grid-template-columns: repeat(2, 1fr);

      @media screen and (max-width: 48rem) {
        grid-template-columns: repeat(1, 1fr);

        .image {
          aspect-ratio: 1 / 0.5;
        }
      }
    }

    &.rowCount--3 ul {
      grid-template-columns: repeat(3, 1fr);

      @media screen and (max-width: 58rem) {
        grid-template-columns: repeat(1, 1fr);

        .image {
          aspect-ratio: 1 / 0.5;
        }
      }
    }

    @media screen and (max-width: 79rem) {
      gap: 1rem;
    }
  }

  ul {
    display: grid;
    list-style: none;
    padding: 0;
    gap: 2rem;
  }

  .item {
  }

  a {
    display: block;
    position: relative;
  }

  .image {
    width: 100%;
    margin-bottom: 1rem;
    border-radius: 0.625rem;
    aspect-ratio: 16 / 10;
    object-fit: cover;
  }

  .category {
    position: absolute;
    top: 1rem;
    left: 1rem;
  }

  .title {
    font-size: 1.5rem;
    line-height: 1.55rem;
    margin: 0 0 1rem;
    color: var(--colorThemeTextMain);
  }

  .excerpt {
    margin-bottom: 0;
    color: var(--colorThemeTextShaded);
  }

  .compact ul {
    margin: 0;
    display: grid;
    grid-template-columns: initial !important;
    grid-template-rows: repeat(2, 1fr);
    gap: 1rem;

    a {
      display: grid;
      grid-template-columns: [content] auto [image] 100px;
    }

    .content-wrapper {
      grid-area: content;
      margin-right: 0.5rem;
    }

    .image {
      grid-area: image;
      margin-bottom: 0;
      width: 100%;
      height: 100%;
    }

    .category {
      position: static;
      top: initial;
      left: initial;
      margin-bottom: 0.5rem;
    }

    .title {
      color: var(--colorThemeTextMain);
      margin-bottom: 0.5rem;
      font-size: 1.125rem;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 1;
      -webkit-box-orient: vertical;

      &.dark {
        color: var(--colorWhite);
      }
    }

    .excerpt {
      color: var(--colorThemeTextShaded);
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      font-size: 0.875rem;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;

      &.dark {
        color: #969696;
      }
    }
  }

  .empty-item {
    @media screen and (max-width: 58rem) {
      display: none;
      visibility: hidden;
    }

    &__image {
      width: 100%;
      padding-bottom: 63%;
      margin-bottom: 1.5rem;
      border-radius: 0.625rem;
      background-color: var(--colorThemeBackgroundShaded);
      position: relative;

      span {
        position: absolute;
        top: 1rem;
        left: 1rem;
        height: 22px;
        border-radius: 0.5rem;
        background-color: var(--colorThemeBackgroundAccent);
        width: 72px;
      }
    }

    &__title {
      margin-bottom: 1rem;
      span {
        display: block;
        height: 26px;
        background-color: var(--colorThemeBackgroundShaded);
        margin-bottom: 0.25rem;

        &:nth-child(1) {
          width: 90%;
        }

        &:nth-child(2) {
          width: 80%;
        }
      }
    }
    &__excerpt {
      span {
        display: block;
        height: 16px;
        background-color: var(--colorThemeBackgroundShaded);
        margin-bottom: 0.25rem;

        &:nth-child(1) {
          width: 90%;
        }

        &:nth-child(2) {
          width: 98%;
        }

        &:nth-child(3) {
          width: 95%;
        }
      }
    }
  }
</style>
