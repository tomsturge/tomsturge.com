---
import { sanityClient } from "sanity:client";
import type { Article, WithContext } from "schema-dts";
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";

import { urlForImage } from "@/scripts/urlForImage";
import { getFullArticles, getRelatedArticles } from "@/ui/queries";
import { ArticleLayout } from "@/ui/layouts";

import {
  Seo,
  PortableText,
  ArticleHeader,
  Logo,
  Breadcrumb,
} from "@/ui/components";

export const getStaticPaths = async () => {
  // Get articles and their categories
  const articles = await getFullArticles();

  const categories = await sanityClient.fetch(`
    *[_type == "category"] {
      _id,
      title,
      slug,
      "articles": *[_type == "article" && references(^._id)] {
        _id,
        slug
      }
    }
  `);

  return articles
    .map((article) => {
      // Find which category this article belongs to
      const articleCategory = categories.find((cat) =>
        cat.articles.some((catArticle) => catArticle._id === article._id),
      );

      if (!articleCategory) {
        console.warn(`No category found for article: ${article.title}`);
        return null;
      }

      return {
        params: {
          category: articleCategory.slug.current,
          slug: article.slug.current,
        },
        props: {
          _id: article._id,
          body: article.body,
          headings: article.headings,
          categories: article.categories,
          excerpt: article.excerpt,
          publishedAt: article.publishedAt,
          readingTime: article.readingTime,
          wordCount: article.wordCount,
          mainImage: article.mainImage,
          socialImage: article.socialImage,
          slug: article.slug,
          title: article.title,
          author: article.author,
          category: articleCategory,
        },
      };
    })
    .filter(Boolean); // Remove any null entries
};

type ArticleProps = {
  _id: string;
  body: any;
  slug: {
    current: string;
  };
  headings: any;
  categories: any[];
  excerpt: string;
  mainImage: SanityImageSource;
  socialImage: SanityImageSource;
  publishedAt: Date;
  readingTime: number;
  wordCount: number;
  title: string;
  author: any;
  category: {
    _id: string;
    title: string;
    slug: {
      current: string;
    };
  };
};

const {
  _id,
  body,
  categories,
  excerpt,
  headings,
  mainImage,
  publishedAt,
  readingTime,
  slug,
  socialImage,
  title,
  wordCount,
} = Astro.props as ArticleProps;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { slug: categorySlug, title: categoryTitle } = categories[0];

const relatedArticles = await getRelatedArticles({
  limit: 3,
  category: categorySlug.current,
  currentSlug: slug.current,
});

const schema: WithContext<Article> = {
  "@context": "https://schema.org",
  "@type": "Article",
  "@id": canonicalURL.toString(),
  url: canonicalURL.toString(),
  headline: title,
  name: title,
  description: excerpt,
  author: { "@id": "https://tomsturge.com/#person" },
  publisher: { "@id": "https://tomsturge.com/#person" },
  isPartOf: { "@id": `https://tomsturge.com/${categorySlug.current}/` },
  mainEntityOfPage: `https://tomsturge.com/${categorySlug.current}/${slug.current}/`,
  datePublished: new Date(publishedAt).toISOString(),
  inLanguage: "en-GB",
  image: urlForImage(socialImage).width(1200).height(630).url(),
  articleSection: categoryTitle,
  timeRequired: `PT${readingTime}M`,
  wordCount,
};
---

<ArticleLayout title={title} type="article" relatedArticles={relatedArticles}>
  <Fragment slot="seo">
    <Seo
      title={title}
      description={excerpt}
      url={canonicalURL}
      author="Tom Sturge"
      publishedAt={publishedAt}
      image={urlForImage(socialImage).width(1200).height(630).url()}
    />
    <script type="application/ld+json" set:html={JSON.stringify(schema)} />
  </Fragment>

  <div class="article-masthead">
    <div class="article-masthead__container">
      <div class="article-masthead__logo">
        <Logo />
      </div>

      <p>{title}</p>
    </div>
  </div>

  <div class="wrapper" itemscope itemtype="https://schema.org/Article">
    <Breadcrumb />

    <ArticleHeader
      categories={categories}
      excerpt={excerpt}
      title={title}
      readingTime={readingTime}
      publishedAt={publishedAt}
      image={mainImage}
    />

    <div class="article__toc-wrapper">
      <nav aria-label="Table of Contents" class="article__toc-content">
        <p class="toc-title">Table of Contents</p>

        <ul>
          {
            headings.map(({ style, children }) => {
              const [child] = children;

              return (
                <li class={`toc-heading--${style}`}>
                  <a
                    href={`#${child.text
                      .replace(/([a-z])([A-Z])/g, "$1-$2")
                      .replace(/[\s_:]+/g, "-")
                      .toLowerCase()}`}
                  >
                    {child.text}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </nav>
    </div>

    <article class="article-content" itemprop="articleBody">
      <PortableText value={body} />
    </article>
  </div>

  <div style="display: none;" data-document-id={_id} data-slug={slug.current}>
  </div>
</ArticleLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const masthead = document.querySelector(".article-masthead");

    addEventListener("scroll", () => {
      if (window.scrollY > 250) {
        masthead.classList.add("visible");
      } else {
        masthead.classList.remove("visible");
      }
    });
  });
</script>

<script>
  import { createClient } from "@supabase/supabase-js";

  const supabase = createClient(
    import.meta.env.PUBLIC_SUPABASE_URL,
    import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
  );

  async function trackPageView() {
    const documentId = document
      .querySelector("[data-document-id]")
      ?.getAttribute("data-document-id");
    const slug = document
      .querySelector("[data-slug]")
      ?.getAttribute("data-slug");

    try {
      await supabase.rpc("increment_view", {
        doc_id: documentId,
        article_slug: slug,
      });
    } catch (error) {
      // Silently fail - don't log errors in production to avoid console noise
      // console.error("Failed to track page view:", error);
    }
  }

  let hasTrackedView = false;

  const handleViewTracking = () => {
    if (!hasTrackedView) {
      hasTrackedView = true;
      trackPageView();
    }
  };

  document.addEventListener("DOMContentLoaded", handleViewTracking);

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", handleViewTracking);
  } else {
    handleViewTracking();
  }
</script>

<style lang="scss">
  .article-masthead {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    transform: translateY(-5rem);
    transition: all 0.5s;
    height: 4.375rem;
    background-color: var(--colorThemeBackgroundMain);
    box-shadow: 0 0 1rem 0px rgba(0, 0, 0, 0.2);
    z-index: 100;
    display: flex;
    align-items: center;

    &.visible {
      transform: translateY(0);
    }
  }

  .article-masthead {
    &__logo {
      transform: translateY(-0.125rem);
    }

    &__container {
      max-width: var(--widthMainContainer);
      margin: 0 auto;
      display: flex;
      justify-content: flex-start;
      align-items: center;
      width: 100%;

      @media screen and (max-width: 79rem) {
        margin-right: 2rem;
        margin-left: 2rem;
        width: calc(100% - 4rem);
      }

      p {
        font-size: 1.15rem;
        margin: 0 0 0 1rem;
      }
    }

    @media screen and (max-width: 54rem) {
      display: none;
      visibility: hidden;
    }
  }

  .wrapper {
    max-width: var(--widthArticleContainer);
    margin: 0 auto;
    position: relative;

    @media screen and (max-width: 81rem) {
      max-width: 43.75rem;
      margin: 0 auto;
    }

    @media screen and (max-width: 48rem) {
      margin: 0 2rem;
    }

    @media screen and (max-width: 42rem) {
      margin: 0 1.5rem;
    }
  }

  .article__toc-wrapper {
    height: calc(100% - 52rem);
    width: 16rem;
    font-size: var(--fontSizeMicro);
    position: absolute;
    right: 0;
    transform: translateX(100%);

    @media screen and (max-width: 83rem) {
      display: none;
      visibility: hidden;
    }
  }

  .article__toc-content {
    top: 5.5rem;
    bottom: 1rem;
    position: sticky;
    background-color: var(--colorThemeBackgroundShaded);
    padding: 1rem;
    border-radius: 0.5rem;

    p {
      font-style: italic;
      font-weight: var(--fontWeightMedium);
      font-size: var(--fontSizeContentBody);
      margin: 0 0 0.5rem;

      &:after {
        content: "";
        display: block;
        margin: 1rem 0;
        width: 25%;
        height: 0.125rem;
        background-color: var(--colorThemeBackgroundShaded);
      }
    }

    ul {
      list-style: none;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    li {
      &.toc-heading--h3 {
        padding-left: 1rem;
      }

      &:not(:last-child) {
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--colorThemeBackgroundShaded);
      }
    }
  }

  .article-content {
    font-weight: 400;
    max-width: 45rem;
    margin: 0 auto;
  }

  .article-content__footer {
    position: relative;
    padding: 3rem 5rem;
    background-color: var(--colorBrandWhite);
  }
</style>

<style lang="scss" is:global>
  .article-content {
    color: var(--colorThemeTextMain);
    font-weight: 300;
    padding-bottom: 3rem;

    p {
      font-size: var(--fontSizeContentBody);
      font-family: var(--fontFamilyBody);
      line-height: 1.6;
      margin: 0 0 1rem;
      min-height: 1px;
    }

    .headingTwo:first-of-type {
      margin-top: 2rem !important;
    }

    ul,
    ol {
      padding-left: 3.5rem;

      @media screen and (max-width: 46.875rem) {
        padding-left: 2rem;
      }
    }

    ul {
      font-size: var(--fontSizeContentBody);
      list-style: circle;
      line-height: 1.4;

      li {
        margin-bottom: 0.5rem;
      }
    }

    ol {
      font-size: var(--fontSizeContentBody);
      line-height: 1.4;

      li {
        margin-bottom: 0.5rem;
      }
    }

    h1,
    h2,
    h3,
    h4,
    h5 {
      font-family: var(--fontFamilyHeading);
    }

    a {
      text-decoration: none;
      color: var(--colorThemeTextMain);
      box-shadow: inset 0 -1px 0 0 var(--colorThemeTextMain);
      &:hover {
        box-shadow: inset 0 -2px 0 0 var(--colorThemeTextMain);
      }
    }
  }
</style>
